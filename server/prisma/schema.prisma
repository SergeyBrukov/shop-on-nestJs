// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  name     String
  password String
  basket   Basket   @relation(fields: [basketId], references: [id])
  Orders   Orders[]
  basketId Int      @unique
}

model Product {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  bestseller    Boolean         @default(false)
  new           Boolean         @default(false)
  articul       String          @unique
  price         String
  producer      Producer        @relation(fields: [producerId], references: [id])
  producerId    Int
  image         Files[]
  category      Category        @relation(fields: [categoryId], references: [id])
  categoryId    Int
  basketProduct BasketProduct[]
  orderProducts OrderProduct[]
}

model Producer {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  image   Files     @relation(fields: [filesId], references: [id], onDelete: Cascade)
  filesId Int       @unique
  Product Product[]
}

model Files {
  id        Int       @id @default(autoincrement())
  fileName  String
  filePath  String
  Producer  Producer?
  Product   Product?  @relation(references: [id], fields: [productId])
  productId Int?
}

model Category {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  Product Product[]
}

model Orders {
  id            Int            @id @default(autoincrement())
  User          User?          @relation(fields: [userId], references: [id])
  userId        Int?
  orderProducts OrderProduct[]
  orderPrice    Int            @default(0)
}

model OrderProduct {
  id        Int      @id @default(autoincrement())
  orders    Orders?  @relation(fields: [ordersId], references: [id])
  ordersId  Int?
  product   Product? @relation(fields: [productId], references: [id])
  productId Int?
  count     Int      @default(1)
}

model Basket {
  id       Int             @id @default(autoincrement())
  products BasketProduct[]
  User     User?
}

model BasketProduct {
  id        Int     @id @default(autoincrement())
  basket    Basket  @relation(fields: [basketId], references: [id])
  basketId  Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  count     Int     @default(1)
}
